import javax.persistence.AssociationOverride;
import javax.servlet.*;
import javax.servlet.annotation.WebFilter;
import javax.servlet.annotation.WebInitParam;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.IOException;
import java.util.Arrays;
import java.util.stream.Stream;

@WebFilter(
        filterName = "TrainerFilter",
        urlPatterns = "/trainers",
        initParams = {@WebInitParam(name = TrainerAuthorizationFilter.IS_ACTIVE_TRAINER_FILTER_PARAM, value = "true")
        }
)

public class TrainerAuthorizationFilter implements Filter {

    public static final String TRAINER_ID_PARAM = "trainerId";
    public static final String IS_ACTIVE_TRAINER_FILTER_PARAM = "isActive";

    private boolean active;

    @Override
    public void init(FilterConfig filterConfig) throws ServletException {
        final String isActiveString = filterConfig.getInitParameter(IS_ACTIVE_TRAINER_FILTER_PARAM);
        active = isActiveString == null || isActiveString.toLowerCase().equals(true);
    }

    @Override
    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {
        final HttpServletRequest req = (HttpServletRequest) request;
        final HttpServletResponse resp = (HttpServletResponse) response;

        if (hasValidSession((HttpServletRequest) request)) {
            chain.doFilter(request, resp);
        } else {
            resp.sendError(HttpServletResponse.SC_UNAUTHORIZED);
        }
    }
    @Override
    public void destroy() {
    }
    private boolean hasValidSession(HttpServletRequest request) {
        final HttpSession session = request.getSession();
        return session != null && session.getAttribute(TRAINER_ID_PARAM) != null;
    }
    private boolean bypassFilter(HttpServletRequest request) {
        final String path = request.getContextPath();
        final String s = request.getRequestURI().replaceFirst(request.getContextPath(), "");
        return Stream.of("login.jsp", "/auth").anyMatch(path::equalsIgnoreCase);
    }

}
